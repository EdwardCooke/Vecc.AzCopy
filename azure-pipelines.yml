trigger:
- master

resources:
- repo: self

variables:
  Version.MajorMinor: 1.0
  Version.Revision: $[counter(variables['Version.MajorMinor'], 0)]
  Version: $(Version.MajorMinor).$(Version.Revision)

name: $(Version.MajorMinor).$(Version.Revision)

steps:

- task: DotNetCoreCLI@2
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: Publish linux-arm64
  inputs:
    command: 'publish'
    publishWebProjects: false
    projects: 'Vecc.AzSync/Vecc.AzSync.csproj'
    arguments: '-c Release -r linux-arm64 -p:PublishSingleFile=true'
    zipAfterPublish: false

- task: DotNetCoreCLI@2
  displayName: Publish linux-arm
  inputs:
    command: 'publish'
    publishWebProjects: false
    projects: 'Vecc.AzSync/Vecc.AzSync.csproj'
    arguments: '-c Release -r linux-arm -p:PublishSingleFile=true'
    zipAfterPublish: false

- task: DotNetCoreCLI@2
  displayName: Publish linux-x64
  inputs:
    command: 'publish'
    publishWebProjects: false
    projects: 'Vecc.AzSync/Vecc.AzSync.csproj'
    arguments: '-c Release -r linux-x64 -p:PublishSingleFile=true'
    zipAfterPublish: false

- task: Docker@2
  displayName: Docker Login
  inputs:
    containerRegistry: 'crvecc.azurecr.io-Vecc.AzSync'
    command: 'login'

- task: CmdLine@2
  displayName: Build Docker Images
  inputs:
    script: |
      docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      docker build \
        -t crvecc.azurecr.io/azsync:$(Version)-amd64 \
        --build-arg ARCH=amd64 \
        --build-arg IMGPATH=linux-x64 \
        -f Dockerfile.build .
      docker build \
        -t crvecc.azurecr.io/azsync:$(Version)-arm \
        --build-arg ARCH=arm32v7 \
        --build-arg IMGPATH=linux-arm \
        -f Dockerfile.build .
      docker build \
        -t crvecc.azurecr.io/azsync:$(Version)-arm64 \
        --build-arg ARCH=arm64v8 \
        --build-arg IMGPATH=linux-arm64 \
        -f Dockerfile.build .

- task: CmdLine@2
  displayName: Push Docker Images
  inputs:
    script: |
      docker image push --all-tags crvecc.azurecr.io/azsync:$(Version)-amd64
      docker image push --all-tags crvecc.azurecr.io/azsync:$(Version)-arm
      docker image push --all-tags crvecc.azurecr.io/azsync:$(Version)-arm64

- task: CmdLine@2
  displayName: Build Multi-arch image manifests
  inputs:
    script: |
      docker manifest create \
          crvecc.azurecr.io/azsync:latest \
          --amend crvecc.azurecr.io/azsync:$(Version)-amd64 \
          --amend crvecc.azurecr.io/azsync:$(Version)-arm \
          --amend crvecc.azurecr.io/azsync:$(Version)-arm64
      docker manifest create \
          crvecc.azurecr.io/azsync:$(Version) \
          --amend crvecc.azurecr.io/azsync:$(Version)-amd64 \
          --amend crvecc.azurecr.io/azsync:$(Version)-arm \
          --amend crvecc.azurecr.io/azsync:$(Version)-arm64

- task: CmdLine@2
  displayName: Push Multi-arch image manifests
  inputs:
    script: |
      docker manifest push crvecc.azurecr.io/azsync:latest
      docker manifest push crvecc.azurecr.io/azsync:$(Version)